#!/bin/bash


#SBATCH --job-name=nucmer
#SBATCH --output=./out/WGS_nucmer.%A_%a.out
#SBATCH --error=./out/WGS_nucmer.%A_%a.err
#SBATCH --cpus-per-task=112
#SBATCH --qos=gp_bscls
#SBATCH --account=bsc83
#SBATCH --time=01:00:00

#INPUT : fastq
#Step 1   (using seqkit)        : Convert fastq file to fasta (nucmer takes fasta as input) 
#Step 2   (using nucmer)        : Extract candidate rDNA reads (reads with a 30nt exact match with a provided reference sequence)
#Step 3   (using show-coords)   : Convert delta file generated by step 2 to tab-seperated readable coords file
#Step 4   (using bash)          : coord file column 13 contains read name, extract all read names for all reads with a 30nt match and keep PE for which both pairs have a 3nt match
#Step 5   (using seqkit)        : use readIDS from step 4 to extract those reads from original fastq files

# load modules
module load mummer samtools anaconda
source activate seqkit

file_tab=$1
#file_tab=WGS_GTEx_ids.tab
input_folder=$2
output_folder=$3 
species=$4
length=30

echo "Starting code ${date}"

file=$(sed -n "${SLURM_ARRAY_TASK_ID}p" ${file_tab} | cut -f1)

echo $file

# path to WGS cram files
#input_folder=/gpfs/scratch/bsc83/MN4/bsc83/bsc83535/GTEx/v8/bam_files/Donors_DNAseq/
cram_file=${input_folder}/${file}.cram


# 1. cram2fastq rDNA-like genomic regions. Here, as we start with a cram file, we want to get the subset of reads that mapped to any rDNA-like region
if [[ $species == "mouse" ]]; then
	echo "Running nucmer to keep candidate rDNA reads"
	reference=/data/resources_broad_hg38_v0_Homo_sapiens_assembly38.fasta
	bed_file=/data/hg38_rDNA-like_regions.bed
	rDNA_reference=data/chrR.fa
elif [[ $species == "human" ]]; then
	reference=/gpfs/projects/bsc83/Projects/ribosomal_RNAs/Jose/04_Pipeline/data/resources_broad_hg38_v0_Homo_sapiens_assembly38.fasta
	bed_file=/gpfs/projects/bsc83/Projects/ribosomal_RNAs/Jose/04_Pipeline/data/hg38_rDNA-like_regions.bed
	#The reference is adapted from this paper: https://www.jbc.org/article/S0021-9258(23)01794-5/fulltext
	rDNA_reference=/gpfs/projects/bsc83/Data/assemblies/T2T_CHM13/chrR/Human_hs1-rDNA_genome_v1.0/chroms/hs1-rDNA_v1.0.chrR.47S_pre-rRNA.500padded.fa
else
	echo "Species not available. Try mouse or human"
fi


samtools view -@ 60 -h -T ${reference} -L ${bed_file} ${cram_file} | samtools fastq -@ 60 -N --reference ${reference} -1 ${output_folder}/${file}.rDNA-like.R1.fastq.gz -2 ${output_folder}/${file}.rDNA-like.R2.fastq.gz 

echo "fastq of rDNA_like regions created ${date}"

#We might also want to get the singletons mapping to those regions. Think about it

#Convert fastq to fasta
echo "start: converting fastq to fasta - $(date)"
seqkit sort ${output_folder}/${file}.rDNA-like.R1.fastq.gz | gzip > ${TMPDIR}/${file}.R1.sorted.fastq.gz
seqkit sort ${output_folder}/${file}.rDNA-like.R2.fastq.gz | gzip > ${TMPDIR}/${file}.R2.sorted.fastq.gz

seqkit fq2fa ${TMPDIR}/${file}.R1.sorted.fastq.gz -j 16 > ${TMPDIR}/${file}_1.fasta
seqkit fq2fa ${TMPDIR}/${file}.R2.sorted.fastq.gz -j 16 > ${TMPDIR}/${file}_2.fasta
echo "end: converting fastq to fasta - $(date)"
echo ""


# Step 2

echo "start: finding 30 nt matches: $(date)"
#This takes 15 minutes
# 2.1
#FLAGS used :
# --maxmatch      Use all anchor matches regardless of their uniqueness
# -l  maximal exact match or anchor match size
# --delta=PATH    Output delta file to PATH (instead of PREFIX.delta)
nucmer --maxmatch -l ${length} --delta=${TMPDIR}/${file}_1.nucmer.rDNA.delta --threads=30 ${rDNA_reference} ${TMPDIR}/${file}_1.fasta
nucmer --maxmatch -l ${length} --delta=${TMPDIR}/${file}_2.nucmer.rDNA.delta --threads=30 ${rDNA_reference} ${TMPDIR}/${file}_2.fasta

# 2.2
# delta file can be used to extract coordinates and alignment data table, and also to see alignments, but for analysis main file is .coord file
#FLAGS used :
#-r      Sort output lines by reference
#-c      Include percent coverage columns in the output
#-l      Include sequence length columns in the output
#-T      Switch output to tab-delimited for
show-coords -r -c -l -T ${TMPDIR}/${file}_1.nucmer.rDNA.delta > ${TMPDIR}/${file}_1.nucmer.rDNA.coords
show-coords -r -c -l -T ${TMPDIR}/${file}_2.nucmer.rDNA.delta > ${TMPDIR}/${file}_2.nucmer.rDNA.coords
echo "end: finding  reads with 30nt exact match - $(date)"
echo ""

# Step 3
echo "start: getting read ids - $(date)"
#It takes 1 min
# first five lines are headers
tail -n +5 ${TMPDIR}/${file}_1.nucmer.rDNA.coords | awk '{print $13}' > ${TMPDIR}/${file}.R1.out
tail -n +5 ${TMPDIR}/${file}_2.nucmer.rDNA.coords | awk '{print $13}' > ${TMPDIR}/${file}.R2.out

# only keep reads for which both end of the read have a 30nt match
# hs1 (T2T-CHM13) WGS data does not include /1 and /2 in read names
# GTEx read IDs include /1 and /2 -> remove to keep read-pair ids
awk 'NR==FNR{a[$1]=$1; next } {if (a[$1]) {print} }' <(awk '{OFS="\t"; split($1,a,"/");print a[1]}' ${TMPDIR}/${file}.R1.out) <(awk '{OFS="\t"; split($1,a,"/");print a[1]}' ${TMPDIR}/${file}.R2.out) > ${TMPDIR}/${file}.uniq_read_pair_IDs.out
sed 's/$/\/1/'  ${TMPDIR}/${file}.uniq_read_pair_IDs.out > ${TMPDIR}/${file}.R1_read_ids.out
sed 's/$/\/2/'  ${TMPDIR}/${file}.uniq_read_pair_IDs.out > ${TMPDIR}/${file}.R2_read_ids.out

# Step 4
echo "start: extracting reads with match from fasta - $(date)"
seqkit grep -f ${TMPDIR}/${file}.R1_read_ids.out ${TMPDIR}/${file}.R1.sorted.fastq.gz -j 30 | gzip > ${output_folder}/${file}_1.rDNA_reads.fastq.gz
seqkit grep -f ${TMPDIR}/${file}.R2_read_ids.out ${TMPDIR}/${file}.R2.sorted.fastq.gz -j 30 | gzip > ${output_folder}/${file}_2.rDNA_reads.fastq.gz
echo "end: extracting reads with match from fasta - $(date)"
echo ""


